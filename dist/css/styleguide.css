/*
  888                               888                        d8b          888
  888                               888                        Y8P          888
  888                               888                                     888
  88888b.  888d888 .d88b.   8888b.  888  888 88888b.   .d88b.  888 88888b.  888888 .d8888b
  888 "88b 888P"  d8P  Y8b     "88b 888 .88P 888 "88b d88""88b 888 888 "88b 888    88K
  888  888 888    88888888 .d888888 888888K  888  888 888  888 888 888  888 888    "Y8888b.
  888 d88P 888    Y8b.     888  888 888 "88b 888 d88P Y88..88P 888 888  888 Y88b.       X88
  88888P"  888     "Y8888  "Y888888 888  888 88888P"   "Y88P"  888 888  888  "Y888  88888P'
                                            888
                                            888
                                            888
  Breakpoints mixin

  @include breakpoint($point)

  The breakpoint() function takes a single required parameter. You must pass in the breakpoint
  name or a number ($point). If a breakpoint name is passed, the $breakpoints list as
  defined in _settings.scss (@section 3) is used for a mininum-width. If a number is passed,
  that number of pixels is used as a minimum-width.

  Ithis will cause any styles between the {} brackets to be applied only to
  screen sizes wider than the breakpoint passed:

  @include breakpoint(m) {
    font-size: 18px;
  }

  ...will set the font-size to '18px' on any screen larger than the medium breakpoint size.

  @include breakpoint(1024) {
    font-weight: bold;
  }

  ...will set the font-weight to 'bold' on any screen larger than 1024 pixels wide.
*/
/*
           888            d8b
           888            Y8P
           888
  .d8888b  888888 888d888 888 88888b.   .d88b.
  88K      888    888P"   888 888 "88b d88P"88b
  "Y8888b. 888    888     888 888  888 888  888 888888
       X88 Y88b.  888     888 888  888 Y88b 888
   88888P'  "Y888 888     888 888  888  "Y88888
                                            888
                                       Y8b d88P
                                        "Y88P"
                           888
                           888
                           888
  888d888 .d88b.  88888b.  888  8888b.   .d8888b .d88b.
  888P"  d8P  Y8b 888 "88b 888     "88b d88P"   d8P  Y8b
  888    88888888 888  888 888 .d888888 888     88888888
  888    Y8b.     888 d88P 888 888  888 Y88b.   Y8b.
  888     "Y8888  88888P"  888 "Y888888  "Y8888P "Y8888
                  888
                  888
                  888

  String Replacement function

  str-replace($string, $search, $replace)

  The str-replace() function takes three parameters, the first two of which are required. You
  must pass the text to be modified ($string) and the text you want to replace ($search). The
  third (optional) parameter is the text you want to insert in place of the $search text
  ($replace). If the $replace parameter is not passed, the $search text will simply be
  removed. For example:

  .selector {
    $string: 'The answer to life, the universe and everything is blah.';
    content: str-replace($string, 'blah', '42');
  }

  ...will compile to the following CSS...

  .selector {
    content: 'The answer to life, the universe and everything is 42.';
  }

  This function is used in the Font Face Declaration mixin defined and documented in
  _directives.scss (@section 6).
*/
/*
   .d888                  888          .d888
  d88P"                   888         d88P"
  888                     888         888
  888888 .d88b.  88888b.  888888      888888 8888b.   .d8888b .d88b.
  888   d88""88b 888 "88b 888         888       "88b d88P"   d8P  Y8b
  888   888  888 888  888 888  888888 888   .d888888 888     88888888
  888   Y88..88P 888  888 Y88b.       888   888  888 Y88b.   Y8b.
  888    "Y88P"  888  888  "Y888      888   "Y888888  "Y8888P "Y8888

  Font Face Declaration mixin

  fontdef($family, $type, $weight, $style, $stretch)

  Uses the $font-families list as defined in _settings.scss (@section 5a).

  The fontdef() mixin takes five parameters, the first two of which are required. You must pass
  the font family name ($family) and font variant name ($variant) to generate a @font-face
  definition.

  You can also pass an optional $weight [normal | 100 | 200 | ... | 800 | 900], $style
  [normal | italic], and $stretch [normal | ultra-condensed | extra-condensed | condensed |
  semi-condensed | semi-expanded | expanded | extra-expanded | ultra-expanded]. The optional
  variables will all default to 'normal' if they are not passed. The $stretch variable is
  currently not used in our design system, but is available for potential future use.

  For example:

  @include font-def(Fira Sans Condensed, semibolditalic, 600, italic, normal);

  ...will compile to the following CSS...

  @font-face {
    font-family: 'Fira Sans Condensed';
    src: url('../fonts/firasanscondensed-semibolditalic.woff') format('woff');
    font-weight: 600;
    font-style: italic;
    font-stretch: normal;
  }

  This function is used to generate @font-face declarations in _fonts.scss.
*/
/*
           888             888                                    888
           888             888                                    888
           888             888                                    888
  .d8888b  888888  8888b.  888888 .d88b.          .d8888b .d88b.  888  .d88b.  888d888 .d8888b
  88K      888        "88b 888   d8P  Y8b        d88P"   d88""88b 888 d88""88b 888P"   88K
  "Y8888b. 888    .d888888 888   88888888 888888 888     888  888 888 888  888 888     "Y8888b.
       X88 Y88b.  888  888 Y88b. Y8b.            Y88b.   Y88..88P 888 Y88..88P 888          X88
   88888P'  "Y888 "Y888888  "Y888 "Y8888          "Y8888P "Y88P"  888  "Y88P"  888      88888P'

  State Colors mixins

  state-error()
  state-info()
  state-neutral()
  state-success()
  state-warning()

  Include these to use standard state colors (border-color, background-color, color) on an element.
*/
/*
  88888b.   .d88b.  888  888  888  .d88b.  888d888
  888 "88b d88""88b 888  888  888 d8P  Y8b 888P"
  888  888 888  888 888  888  888 88888888 888
  888 d88P Y88..88P Y88b 888 d88P Y8b.     888
  88888P"   "Y88P"   "Y8888888P"   "Y8888  888
  888
  888
  888

  Power function

  pow($number, $exponent)
*/
/*
                              888          888
                              888          888
                              888          888
  88888b.d88b.   .d88b.   .d88888 888  888 888  8888b.  888d888
  888 "888 "88b d88""88b d88" 888 888  888 888     "88b 888P"
  888  888  888 888  888 888  888 888  888 888 .d888888 888   888888
  888  888  888 Y88..88P Y88b 888 Y88b 888 888 888  888 888
  888  888  888  "Y88P"   "Y88888  "Y88888 888 "Y888888 888

                             888
                             888
                             888
  .d8888b   .d8888b  8888b.  888  .d88b.
  88K      d88P"        "88b 888 d8P  Y8b
  "Y8888b. 888      .d888888 888 88888888
       X88 Y88b.    888  888 888 Y8b.
   88888P'  "Y8888P "Y888888 888  "Y8888

   Modular Scale Typography function

  ms($factor)
*/
/*
                                                      d8b      888 888    888
                                                      Y8P      888 888    888
                                                               888 888    888
  88888b.d88b.   8888b.  888  888       888  888  888 888  .d88888 888888 88888b.
  888 "888 "88b     "88b `Y8bd8P'       888  888  888 888 d88" 888 888    888 "88b
  888  888  888 .d888888   X88K  888888 888  888  888 888 888  888 888    888  888
  888  888  888 888  888 .d8""8b.       Y88b 888 d88P 888 Y88b 888 Y88b.  888  888
  888  888  888 "Y888888 888  888        "Y8888888P"  888  "Y88888  "Y888 888  888

  Max-Width mixin

  constrained($max-width)
*/
/*
                   d8b      888        888               d8b 888      888
                   Y8P      888        888               Y8P 888      888
                            888        888                   888      888
   .d88b.  888d888 888  .d88888        88888b.  888  888 888 888  .d88888  .d88b.  888d888
  d88P"88b 888P"   888 d88" 888        888 "88b 888  888 888 888 d88" 888 d8P  Y8b 888P"
  888  888 888     888 888  888 888888 888  888 888  888 888 888 888  888 88888888 888
  Y88b 888 888     888 Y88b 888        888 d88P Y88b 888 888 888 Y88b 888 Y8b.     888
   "Y88888 888     888  "Y88888        88888P"   "Y88888 888 888  "Y88888  "Y8888  888
       888
  Y8b d88P
   "Y88P"

  Grid Builder mixin

  build-grid()
*/
/*
  888 d8b          888                                   888                  888 d8b
  888 Y8P          888                                   888                  888 Y8P
  888              888                                   888                  888
  888 888 88888b.  888  888       888  888 88888b.   .d88888  .d88b.  888d888 888 888 88888b.   .d88b.
  888 888 888 "88b 888 .88P       888  888 888 "88b d88" 888 d8P  Y8b 888P"   888 888 888 "88b d8P  Y8b
  888 888 888  888 888888K 888888 888  888 888  888 888  888 88888888 888     888 888 888  888 88888888
  888 888 888  888 888 "88b       Y88b 888 888  888 Y88b 888 Y8b.     888     888 888 888  888 Y8b.
  888 888 888  888 888  888        "Y88888 888  888  "Y88888  "Y8888  888     888 888 888  888  "Y8888

  Link Underline mixin

  link-underline($color)
*/
/*
  888                                     888
  888                                     888
  888                                     888
  888  8888b.  888  888  .d88b.  888  888 888888
  888     "88b 888  888 d88""88b 888  888 888
  888 .d888888 888  888 888  888 888  888 888  888888
  888 888  888 Y88b 888 Y88..88P Y88b 888 Y88b.
  888 "Y888888  "Y88888  "Y88P"   "Y88888  "Y888
                    888
               Y8b d88P
                "Y88P"
  888                                      888                  d8b
  888                                      888                  Y8P
  888                                      888
  88888b.   .d88b.  888  888 88888b.   .d88888  8888b.  888d888 888  .d88b.  .d8888b
  888 "88b d88""88b 888  888 888 "88b d88" 888     "88b 888P"   888 d8P  Y8b 88K
  888  888 888  888 888  888 888  888 888  888 .d888888 888     888 88888888 "Y8888b.
  888 d88P Y88..88P Y88b 888 888  888 Y88b 888 888  888 888     888 Y8b.          X88
  88888P"   "Y88P"   "Y88888 888  888  "Y88888 "Y888888 888     888  "Y8888   88888P'

  Make Layout Boundaries mixin

  make-layout-boundaries($color, $background)
*/
code {
  font-size: 0.83333rem !important; }

pre[class*="language-"] {
  background-color: #ffffff !important;
  border: 1px solid #818386;
  margin: 0 !important;
  padding: 0.5rem 1rem !important; }

:not(pre) > code[class*="language-"] {
  background-color: #e6e7e8;
  border-radius: 0;
  padding: 0.25rem; }

.code-label,
.code-label:first-child {
  color: #ffffff;
  font-size: 0.83333rem;
  font-weight: 700;
  margin: 1rem 0 0;
  padding: 0.5rem 1rem; }

.sg-example {
  border: 1px solid #818386;
  padding: 1rem; }
  .sg-example > * {
    color: #ffffff;
    padding: 1rem;
    text-align: center; }
  .sg-example > *:nth-child(1),
  .sg-example > *:nth-child(5),
  .sg-example > *:nth-child(9) {
    background-color: #0d7e97; }
  .sg-example > *:nth-child(2),
  .sg-example > *:nth-child(6),
  .sg-example > *:nth-child(10) {
    background-color: #be2a26; }
  .sg-example > *:nth-child(3),
  .sg-example > *:nth-child(7),
  .sg-example > *:nth-child(11) {
    background-color: #308453; }
  .sg-example > *:nth-child(4),
  .sg-example > *:nth-child(8),
  .sg-example > *:nth-child(12) {
    background-color: #cb8f2b; }
